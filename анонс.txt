

	###  Папка 1_2  ###
first_script.py		=== открыть страницу, найти поле ввода, вставить текст, 
			найти кнопку, кликнуть
 
	###  Папка 1_6  ###
1_6_3.py		=== конструкция try/finally

1_6_4.py		=== поиск элементов по селекторам
1_6_4(1).py		-  -//- с комментариями
1_6_4(2).py		-  -//-
1_6_4(3).py		- with webdriver.Chrome() as browser

1_6_5.py		=== поиск элемента по тексту в ссылке
1_6_5(1).py		- with webdriver.Chrome() as browser
1_6_5(2).py		- автоматизация ответа

1_6_7.py		=== использование метода find_elements
1_6_7(1).py		- with webdriver.Chrome() as browser

1_6_8.py		=== поиск элемента по XPath
1_6_8(1).py		- автоматизация ответа
1_6_8(2).py		- with webdriver.Chrome() as browser
1_6_8(3).py

1_6_10.py		=== Уникальность селекторов (применение assert) 
					тесты проходят
1_6_11.py		=== Задание на уникальность селекторов (на проверку)
					тот же тест не проходит
log_pass.py

	###  Папка 2_1  ###
2_1_5.py		=== кликаем по checkboxes и radiobuttons	
2_1_5(1).py

2_1_6.py		=== проверяем значение атрибута. Метод get_attribute
2_1_7.py		=== поиск сокровища с помощью get_attribute


	###  Папка 2_2  ###
2_2_3.py		=== работа с выпадающим списком
2_2_3(1).py		- with webdriver.Chrome() as browser

2_2_4.py		=== Метод execute_script
2_2_5.py		=== Пример задачи для execute_script 
2_2_5(1).py		- скроллим элементы до их видимости
2_2_5(2).py		-  -//-

2_2_7.py		== Загрузка файлов. 
			Прикрерляем наш файл в форму для отправки
2_2_8.py		== Прикрерляем файл в форму для отправки
2_2_8(1).py		- Прикрерляем файл в форму для отправки, 
			если его нет создаём "на лету" и отправляем

abc.txt
data.txt

	###  Папка 2_3  ###
2_3_4.py		=== принимаем alert
2_3_6.py		=== переход на новую вкладку


	###  Папка 2_4  ###
2_4_3.py		=== Как работают методы get и find_element
2_4_5.py		=== Selenium Waits (Implicit Waits)
2_4_7-IW.py		=== Implicit Waits НЕЯВНОЕ ожидание
2_4_7-EW.py		=== Explicit Waits ЯВНОЕ ожидание
2_4_7.py
2_4_8.py		=== ждем нужный текст на странице 
			(бронирование домика у моря для отдыха)


	###  Папка 3_2  ###
3_2_11.py		=== Выбор test runner. unittest. 
			if __name__ == "__main__":
3_2_12.py		=== unittest
3_2_13.py		=== оформляем тесты в стиле unittest 
3_2_13(1).py		- unittest про регистрацию Pass & Fail. 
			Задание с шагов 1.6.10 и 1.6.11
3_2_13(2).py		-  -//-
3_2_13(3).py		-  -//-


	###  Папка 3_3  ###
3.3.4			=== Фиксируем пакеты в requirements.txt 
test_338.py		=== PyTest — как пишут тесты
test_339.py		=== PyTest — проверка ожидаемого результата (assert).
			with pytest.raises(NoSuchElementException):
test_339(1).py		-  -//-

	###  Папка 3_3  ###
test_341.py		=== Классические фикстуры (fixtures)
test_343.py		=== Фикстуры, возвращающие значение (экземпляр браузера)
test_344.py		=== Финализаторы — закрываем браузер. yield
test_345.py		=== Область видимости scope
test_346.py		=== Автоиспользование фикстур (autouse=True)
3.4.7			=== Задание: область видимости фикстур (СМАЙЛИКИ)

	###  Папка 3_4  ###
pytest.ini		=== файл с маркерами для pytest
test_352.py		=== Маркировка тестов ч.1
test_354.py		=== Пропуск тестов (@pytest.mark.skip)
test_355.py		=== XFail: помечать тест как ожидаемо падающий
			@pytest.mark.xfail(reason="Данный баг исправлен!")


	###  Папка 3_6  ###
conftest.py		=== Файл с фикстурами для pytest
result.txt		=== К заданию 3.6.  "про совят"
test_362.py		=== Conftest.py — конфигурация тестов
			Три теста в одном классе
test_363.py		=== Параметризация тестов. 						  				@pytest.mark.parametrize('language', ["ru", "en-gb"])
test_363-1.py		--- Параметризация класса (всех функций в классе)
test_363-2.py		--- Параметризация класса (одной функции в классе)
test_363.py
test_364.py		=== Задание: параметризация тестов "СОВУШКИ"
test_364-1.py		-  -//-


	###  Папка 3_6_1  ###
0_conftest.py		=== старый файл conftest.py
conftest.py		=== расширенный conftest.py с заданием браузера 
						и языка браузера с соммандной строки.
test_366.py		=== Conftest.py и передача параметров 
			в командной строке. 
			pytest -s -v 3_6_1\test_366.py
			По умолчанию используется браузер Хром.
			pytest -s -v --browser_name=firefox 3_6_1\test_366.py
			В этом случае запустится браузер Firefox.
test_367.py		=== Плагины и перезапуск тестов. pytest-rerunfailures
			pytest -v --tb=line --reruns 1 --browser_name=chrome test_rerun.py
test_369.py		=== запуск автотестов для разных языков интерфейса


	###  Папка 4_1  ###
conftest.py		=== файл конфигурации
requirements.txt	=== файл со списком загруженых плагинов
test_main_page.py	=== файл с тест-кейсами для главной страницы сайта
test_main_page_0.py
__init__.py		=== файл-конструктор

	###  Папка Ch43  ###
conftest.py			=== файл конфигурации
requirements.txt		=== файл со списком загруженых плагинов
test_main_page.py		=== файл с тест-кейсами для главной страницы сайта
test_product_page.py		=== файл с тест-кейсами для страницы товара
__init__.py
pages
 |__base_page.py		=== файл с общими тестовыми методами
 |__locators.py			=== файл с локаторами
 |__login_page.py		=== файл с тестовыми методами для страницы Входа/Регистрации
 |__main_page.py		=== файл с тестовыми методами для главной страницы
 |__product_page.py		=== файл с тестовыми методами для страницы товара








